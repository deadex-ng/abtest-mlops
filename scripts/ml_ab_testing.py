# -*- coding: utf-8 -*-
"""ml_ab_testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lPr8fZ1OkVu8HCNVxJ3sVb4q15Bl5Y7n
"""

data_url = 'https://raw.githubusercontent.com/deadex-ng/smartAd_ab_testing/main/data/AdSmartABdata.csv'

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv(data_url)

df.head(2)

#check rows and cols 
df.shape

#check missing values 
df.isna().sum()

df_browser = df.drop('browser',axis=1)

df_browser.head(1)

"""Transform categorical data using LabelEncoder"""

experiment = LabelEncoder()
df ['experiment'] = experiment.fit_transform(df['experiment'].astype('str'))
df ['device_make'] = experiment.fit_transform(df['device_make'].astype('str'))
df ['browser'] = experiment.fit_transform(df['browser'].astype('str'))
df.head(3)

#Extract day from data
#Discard year and month because the experiment was done on one month(July) and one year(2020)
df['datetime'] = pd.to_datetime(df['date'],format='%Y-%m-%d')
df.drop('date',axis=1,inplace=True)
df['day'] = df['datetime'].dt.strftime('%d')
df.drop('datetime',axis=1,inplace=True)
df

#all values are numeric except auction_id
df[['day']] = df [['day']].apply(pd.to_numeric)
df.dtypes

#drop id since it won't be needed for our model
df.drop('auction_id',axis=1,inplace=True)

#separate the other attributes from the predicting attribute
x = df.drop('yes',axis=1)
#separte the predicting attribute into Y for model training 
y = df['yes'].values.reshape(-1,1)

x.shape

y.shape

#set the ratio for splitting the data
train_ratio = 0.70
validation_ratio =0.20
test_ratio = 0.10

#train is now 70% of the entires dataset
x_train,x_test,y_train,y_test =train_test_split(x,y,test_size=1 - train_ratio)

#test is now 10% of the initial data set 
#validation is now 20% of the initial data set
x_val,x_test,y_val,y_test =train_test_split(x_test,y_test,test_size= test_ratio/(test_ratio + validation_ratio))

#create an object of linear regression class 
LR = LinearRegression()

#fitting the training data
LR.fit(x_train,y_train)

y_prediction =  LR.predict(x_test)
#y_prediction

# predicting the accuracy score
score=r2_score(y_test,y_prediction)
print('r2 socre is' ,score)
print('mean_sqrd_error is==',mean_squared_error(y_test,y_prediction))
print('root_mean_squared error of is==',np.sqrt(mean_squared_error(y_test,y_prediction)))